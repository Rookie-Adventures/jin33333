后端项目规范
应用层架构

┌─────────────┐
│   Routes    │ 路由层：URL映射，请求解析
├─────────────┤
│ Controllers │ 控制层：请求处理，响应封装
├─────────────┤
│  Services   │ 服务层：业务逻辑，事务处理
├─────────────┤
│   Models    │ 数据：数据访问，模型定义
└─────────────┘

领域模型：
┌─────────────┐
│    Types    │ 类型层：接口，类型定义
├─────────────┤
│    DTOs     │ 传输层：数据传输对象
├─────────────┤
│  Entities   │ 实体层：领域实体
└─────────────┘

基础设施：
┌─────────────┐
│    Utils    │ 工具层：通用工具，辅助函数
├─────────────┤
│ Middleware  │ 中间件：拦截器，中间件
├─────────────┤
│   Config    │ 配置层：环境配置，常量定义
└─────────────┘
#模块划分
核心模块：

auth：认证授权
user：用户管理
chat：聊天功能
model：模型管理
order：订单管理
admin：管理员后台（新增模块）
基础设施：

common：通用功能
config：配置管理
utils：工具函数
types：类型定义

#项目结构
backend/
├── src/
│   ├── config/               # 配置模块
│   │   ├── index.ts         # 统一导出配置
│   │   ├── app.config.ts    # 应用配置
│   │   └── db.config.ts     # 数据库配置
│   ├── controllers/         # 控制器模块
│   │   ├── auth.controller.ts       # 处理与认证相关的请求
│   │   ├── admin.controller.ts      # 处理与管理员相关的请求
│   │   └── __tests__/              # 控制器测试
│   │       └── auth.controller.test.ts
│   ├── services/            # 服务模块
│   │   ├── auth.service.ts          # 处理与认证相关的业务逻辑
│   │   ├── admin.service.ts         # 处理与管理员相关的业务逻辑
│   │   └── __tests__/             # 服务测试
│   │       └── auth.service.test.ts
│   ├── models/              # 数据模型模块
│   │   ├── user.model.ts           # 用户数据模型定义
│   │   ├── admin.model.ts          # 管理员数据模型定义
│   │   └── __tests__/              # 模型测试
│   │       └── user.model.test.ts
│   ├── routes/              # 路由模块
│   │   ├── auth.routes.ts         # 定义与认证相关的路由
│   │   ├── admin.routes.ts        # 定义与管理员相关的路由
│   │   └── __tests__/             # 路由测试
│   │       └── auth.routes.test.ts
│   ├── middleware/          # 中间件模块
│   │   ├── auth.middleware.ts        # 处理认证相关的中间件
│   │   ├── admin.middleware.ts       # 处理管理员权限相关的中间件
│   │   └── __tests__/              # 中间件测试
│   │       └── auth.middleware.test.ts
│   ├── utils/               # 工具模块
│   │   ├── response.ts           # 处理响应的工具函数
│   │   └── __tests__/            # 工具函数测试
│   │       └── response.test.ts
│   ├── types/               # 类型定义模块
│   │   ├── index.ts         # 统一导出类型
│   │   └── api.response.types.ts  # API 响应类型定义
│   └── app.ts               # 应用入口文件
├── test/                    # 测试配置与通用测试目录
│   ├── __tests__/           # 通用测试配置和工具
│   │   ├── setupTests.ts    # 测试环境配置
│   │   └── testUtils.ts     # 通用测试工具函数
└── jest.config.ts           # Jest 主配置文件

#管理员后台功能

新增模块：admin
管理员模块包括对用户的管理、统计数据查看、违规用户的禁用/解封等功能。

1. Admin Service（服务层）
在 services/admin.service.ts 中实现管理员操作的业务逻辑，功能包括但不限于：

禁用用户
解封用户
获取用户统计数据
管理订单等
```typescript
// admin.service.ts
import { User } from '../models/user.model';

export class AdminService {
  async banUser(userId: string) {
    // 实现禁用用户逻辑
  }

  async unbanUser(userId: string) {
    // 实现解封用户逻辑
  }

  async getStatistics() {
    // 获取统计信息
  }
}
```

2. Admin Controller（控制层）
在 controllers/admin.controller.ts 中实现管理员后台接口的控制器，处理请求并调用服务层。

```typescript
// admin.controller.ts
import { Request, Response } from 'express';
import { AdminService } from '../services/admin.service';

export class AdminController {
  private adminService = new AdminService();

  async banUser(req: Request, res: Response) {
    const { userId } = req.params;
    await this.adminService.banUser(userId);
    res.status(200).json({ message: 'User banned successfully' });
  }

  async unbanUser(req: Request, res: Response) {
    const { userId } = req.params;
    await this.adminService.unbanUser(userId);
    res.status(200).json({ message: 'User unbanned successfully' });
  }

  async getStatistics(req: Request, res: Response) {
    const stats = await this.adminService.getStatistics();
    res.status(200).json(stats);
  }
}
```

3. Admin Routes（路由层）
在 routes/admin.routes.ts 中定义管理员相关的路由。

```typescript
// admin.routes.ts
import { Router } from 'express';
import { AdminController } from '../controllers/admin.controller';

const router = Router();
const adminController = new AdminController();

router.post('/ban-user/:userId', adminController.banUser);
router.post('/unban-user/:userId', adminController.unbanUser);
router.get('/statistics', adminController.getStatistics);

export default router;
```

4. Admin Middleware（中间件层）
创建 admin.middleware.ts，确保只有管理员才能访问相关接口。

```typescript
// admin.middleware.ts
import { Request, Response, NextFunction } from 'express';

export const adminMiddleware = (req: Request, res: Response, next: NextFunction) => {
  // 假设已经有登录的验证，进一步验证用户是否为管理员
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Forbidden' });
  }
  next();
};

5. Admin Model（数据模型）
在 models/admin.model.ts 中定义管理员相关的数据模型，可能包括管理员信息、日志等。

```typescript
// admin.model.ts
import mongoose, { Schema, Document } from 'mongoose';

interface IAdmin extends Document {
  username: string;
  password: string;
  role: 'admin';
}

const AdminSchema = new Schema<IAdmin>({
  username: { type: String, required: true },
  password: { type: String, required: true },
  role: { type: String, default: 'admin' },
});

export const Admin = mongoose.model<IAdmin>('Admin', AdminSchema);
```
#API 设计
管理员后台的 API 应包含以下接口：

## 基础 CRUD 接口
// 用户管理
GET    /admin/users              # 列表（支持分页、搜索、排序）
GET    /admin/users/:id          # 详情
POST   /admin/users              # 创建
PUT    /admin/users/:id          # 更新
DELETE /admin/users/:id          # 删除
PATCH  /admin/users/:id/status   # 状态更新

// 角色权限
GET    /admin/roles             # 角色列表
GET    /admin/permissions       # 权限列表
POST   /admin/roles/:id/permissions  # 分配权限

// 系统管理
GET    /admin/logs             # 操作日志
GET    /admin/dashboard        # 仪表盘数据

## 统一请求/响应格式
```typescript
// 统一响应格式
interface AdminResponse<T> {
  code: number;
  data: T;
  message: string;
  timestamp: number;
}

// 分页请求参数
interface PageQuery {
  page: number;
  pageSize: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  keyword?: string;
}

// 分页响应格式
interface PageResult<T> {
  list: T[];
  total: number;
  page: number;
  pageSize: number;
}
```

## 错误码规范
```typescript
enum AdminErrorCode {
  SUCCESS = 200,
  UNAUTHORIZED = 401,
  FORBIDDEN = 403,
  NOT_FOUND = 404,
  VALIDATION_ERROR = 422,
  INTERNAL_ERROR = 500
}
```

权限控制
所有管理员接口需要通过中间件进行权限控制，确保只有管理员能够访问这些接口。

```typescript
// 在 admin.routes.ts 中应用中间件
import { adminMiddleware } from '../middleware/admin.middleware';

router.use(adminMiddleware);
```

# 测试
你需要为每个模块编写单元测试和集成测试，确保管理员接口的功能完备。

admin.controller.test.ts
admin.service.test.ts
admin.middleware.test.ts

#API 文档
确保通过 Swagger 或 OpenAPI 对 API 进行文档化，管理员相关的 API 需要包括：

请求方法、路由路径
请求参数和返回类型
示例请求和响应
错误码说明

# 技术栈
Node.js：版本 22.12.0
Express：版本 4.21.2
MongoDB：版本 7.0.4
Redis：版本 7.2.3
Swagger/OpenAPI：API文档生成

#安全机制
使用 JWT 进行身份验证，确保管理员权限验证。
在管理员请求中，确保进行 角色权限控制，只允许 admin 用户访问管理员接口。

#数据库设计
在数据库模型中，管理员可以有 role 字段来区分权限。需要合理设计数据模型，避免冗余。
