本规范基于 全局开发规范，针对后端项目做进一步细化。

# 后端项目规范

## 应用层架构

```plaintext
应用层架构：
┌─────────────┐
│   Routes    │ 路由层：URL映射，请求解析
├─────────────┤
│ Controllers │ 控制层：请求处理，响应封装
├─────────────┤
│  Services   │ 服务层：业务逻辑，事务处理
├─────────────┤
│   Models    │ 数据：数据访问，模型定义
└─────────────┘

领域模型：
┌─────────────┐
│    Types    │ 类型层：接口，类型定义
├─────────────┤
│    DTOs     │ 传输层：数据传输对象
├─────────────┤
│  Entities   │ 实体层：领域实体
└─────────────┘

基础设施：
┌─────────────┐
│    Utils    │ 工具层：通用工具，辅助函数
├─────────────┤
│ Middleware  │ 中间件：拦截器，中间件
├─────────────┤
│   Config    │ 配置层：环境配置，常量定义
└─────────────┘
```

## 模块划分

### 核心模块
- `auth`: 认证授权
- `user`: 用户管理
- `chat`: 聊天功能
- `model`: 模型管理
- `order`: 订单管理

### 基础设施
- `common`: 通用功能
- `config`: 配置管理
- `utils`: 工具函数
- `types`: 类型定义

## 目录结构

```plaintext
backend/
├── src/
│   ├── config/           # 配置模块
│   │   ├── index.ts     # 统一导出配置
│   │   ├── app.config.ts # 应用配置
│   │   └── db.config.ts  # 数据库配置
│   ├── controllers/     # 控制器模块
│   │   ├── auth.controller.ts          # 处理与认证相关的请求
│   │   └── __tests__/                   # 控制器测试文件夹
│   │       └── auth.controller.test.ts  # 控制器测试
│   ├── services/       # 服务模块
│   │   ├── auth.service.ts                # 处理与认证相关的业务逻辑
│   │   └── __tests__/                     # 服务测试文件夹
│   │       └── auth.service.test.ts      # 服务测试
│   ├── models/         # 数据模型模块
│   │   ├── user.model.ts                    # 用户数据模型定义
│   │   └── __tests__/                       # 模型测试文件夹
│   │       └── user.model.test.ts          # 模型测试
│   ├── routes/         # 路由模块
│   │   ├── auth.routes.ts                    # 定义与认证相关的路由
│   │   └── __tests__/                        # 路由测试文件夹
│   │       └── auth.routes.test.ts          # 路由测试
│   ├── utils/          # 工具模块
│   │   ├── response.ts                         # 处理响应的工具函数
│   │   └── __tests__/                         # 工具函数测试文件夹
│   │       └── response.test.ts               # 工具函数测试
│   ├── types/          # 类型定义模块
│   │   ├── index.ts    # 统一导出类型
│   │   └── api.response.types.ts               # API 响应类型定义
│   ├── middleware/     # 中间件模块
│   │   ├── auth.middleware.ts                  # 处理认证相关的中间件
│   │   └── __tests__/                          # 中间件测试文件夹
│   │       └── auth.middleware.test.ts        # 中间件测试
│   └── app.ts         # 应用入口文件
├── test/               # 测试配置与通用测试目录
│   ├── __tests__/     # 通用测试配置和工具
│   │   ├── setupTests.ts  # 测试环境配置
│   │   └── testUtils.ts   # 通用测试工具函数
│   └── __mocks__/     # Mock 服务和数据
│       ├── apiMocks.ts    # API Mock 数据
│       └── userMocks.ts   # 用户相关 Mock 数据
└── jest.config.ts     # Jest 主配置文件
```

## 类型系统规范

### 静态工具类
```typescript
interface IStaticUtil {
  new(): never;  // 防止实例化
}

class StaticUtil implements IStaticUtil {
  private constructor() {}
}
```

### 模块声明规范
- **全局声明文件** (`global.d.ts`):
  ```typescript
  declare module '@utils/response' {
    import { Response } from 'express';
    interface TApiResponse<T = unknown> {
      success: boolean;
      data?: T;
      error?: {
        code: string;
        message: string;
      };
    }
    const ResponseHandler: IResponseUtil;
    export { ResponseHandler, TApiResponse };
  }
  ```
- **类型收敛**：相关类型放在同一文件
- **类型复用**：使用泛型提高复用性
- **类型安全**：避免 `any`，添加类型守卫

## 技术栈规范
- Node.js@22.12.0
- Express@4.21.2
- MongoDB@7.0.4
- Redis@7.2.3
- Swagger/OpenAPI

## 微服务架构规范
- **设计**：功能模块独立部署，服务通过 REST 或 GraphQL 交互
- **容器化**：Docker + Kubernetes 实现自动部署和扩展

## API设计规范
- **RESTful API**：使用 HTTP 动词操作
- **统一格式**：JSON 数据，规范化错误码

## 数据库设计规范
- **建模**：合理结构，避免冗余，优化查询
- **访问层**：使用 ORM 简化逻辑，封装数据访问

## 性能优化
- **请求优化**：参数校验、去重、压缩
- **缓存策略**：Redis 热点数据缓存
- **异步处理**：消息队列处理耗时任务

## 安全机制
- **验证**：JWT 身份验证，角色权限控制
- **数据保护**：输入验证，防注入
- **访问控制**：多因素认证

## 日志与监控
- **日志**：集中式管理工具分析
- **监控**：实时监控性能、错误率

## 版本控制规范
- **提交信息**：`feat`、`fix` 等
- **分支命名**：`feature/xxx` 和 `bugfix/xxx`