本规范基于 全局开发规范，针对前端项目做进一步细化。

# 前端项目规范

## 目录结构

```plaintext
frontend/
src/
├── components/        # 组件目录
│   ├── common/       # 通用组件
│   └── business/     # 业务组件
│       ├── Chat/
│       └── Profile/
├── pages/            # 页面组件
│   ├── Home/         # 首页
│   ├── Login/        # 登录页
│   └── Dashboard/    # 仪表盘
├── router/           # 路由配置
├── store/            # 状态管理
├── utils/            # 工具函数
├── hooks/            # 自定义钩子
│   ├── auth/         # 鉴权相关
│   ├── data/         # 数据管理相关
│   └── ui/           # UI 交互相关
├── theme/            # 主题配置
│   └── index.ts      # 主题入口文件
├── types/            # 类型定义
│   ├── theme.ts      # 与主题相关的类型
│   ├── api.ts        # API 类型定义
│   ├── components.ts # 通用组件类型
│   └── index.ts      # 汇总导出
└── assets/           # 静态资源
    ├── images/       # 图片资源
    ├── icons/        # 图标资源
    └── fonts/        # 字体资源
```

---

## 技术栈规范

### 技术选型
- **框架**: React@18.2.0
- **语言**: TypeScript@5.3.3
- **样式库**: MUI@5.16.9
- **状态管理**:
  - 全局状态: Redux Toolkit
  - 局部状态: Zustand

---

## UI/UX规范

### 组件设计
- 组件应遵循单一职责原则，避免过于复杂。
- 通用组件具备高复用性，业务组件满足特定场景。

### 响应式布局
- 使用 Flexbox 和 Grid 布局，确保良好的适配性。：

  ```

### 主题与样式
- 使用 MUI 主题系统，统一颜色、字体和间距。
- 支持动态主题切换，所有组件样式应与主题保持一致。

---

## React开发规范

### 组件拆分
- 按功能拆分组件，避免单一组件过于庞大。
- 建议采用“容器组件”和“展示组件”的模式，分离逻辑和视图。

### Props 和 State
- **Props**：
  - 必须定义类型，使用 TypeScript 进行类型检查。
- **State**：
  - 尽量简化，避免不必要的状态。

### Hooks
- 自定义 Hooks 必须以 `use` 开头，遵循命名规则。
- 避免在条件语句中调用 Hooks，确保调用顺序一致。

---

## 状态管理规范

### Redux Toolkit
- 使用 `createSlice` 创建切片，按功能模块拆分。
- 按需使用 `RTK Query` 处理异步逻辑。

### Zustand
- 适用于局部状态管理，避免滥用。
- 使用 `createStore` 创建 store，确保状态的可追踪性。

---

## 路由管理规范

### 路由结构设计
- 使用 React Router 管理路由，支持懒加载，优化首屏加载时间。
- 每个页面的嵌套路由可以单独管理：

  ```typescript
  pages/
  ├── Home/
  │   ├── index.tsx
  │   ├── Home.test.tsx
  │   └── routes.ts
  ```

### 路由权限
- 对需要鉴权的路由进行保护，确保用户权限的正确性。

---

## 性能优化

### 加载优化
- 使用代码分割和懒加载，减少初始加载时间。
- 图片资源采用懒加载技术，提升页面加载速度。

### 渲染优化
- 使用 `React.memo` 和 `useMemo` 避免不必要的重渲染。
- 长列表推荐使用 `react-window` 或 `react-virtualized`。

---

## 安全机制

### XSS 防护
- 对用户输入进行严格的验证和过滤。

### CSRF 防护
- 使用 CSRF Token 验证请求合法性。

### 敏感信息
- 不在前端暴露敏感信息，如 API 密钥等。

---

## 错误处理规范

### 错误边界
- 使用 React 的错误边界组件捕获子组件的错误，提供友好提示。

### 全局错误处理
- 对 API 请求错误进行统一处理，提供用户友好的错误提示。

---

## 测试规范

### 组件测试
- 使用 Jest 和 React Testing Library 进行单元测试。
- 建议按模块集中管理测试文件：
  ```plaintext
  src/
  ├── __tests__/         # 测试目录
  │   ├── Home.test.tsx  # 首页测试
  │   ├── utils.test.ts  # 工具函数测试
  ```

### 覆盖率要求
- 组件测试覆盖率应达到 80% 以上，确保核心逻辑的测试完整性。

---

## 版本控制规范

### 提交信息
- 使用规范化的提交信息格式，例如：
  ```plaintext
  feat: 添加用户登录功能
  fix: 修复登录接口错误
  docs: 更新项目文档
  ```

### 分支命名
- 采用 `feature/xxx` 和 `bugfix/xxx` 命名规则，保持分支清晰。

---